{"mappings":"A,I,E,W,E,C,E,E,C,E,E,E,iB,A,O,I,A,C,E,S,C,E,G,K,E,O,C,C,E,C,O,C,G,K,E,C,I,E,C,C,E,A,Q,C,C,E,C,I,E,C,G,E,Q,C,C,E,O,C,C,E,C,E,E,I,C,E,O,C,E,E,O,E,E,O,A,C,I,E,A,M,uB,E,I,O,E,I,C,mB,C,C,E,Q,C,S,C,C,C,E,C,C,E,C,C,E,E,iB,C,G,E,Q,C,I,E,E,SCcA,MAAM,EAAQ,SAAS,cAAc,CAAC,SAChC,EAAS,SAAS,cAAc,CAAC,UACjC,EAAU,SAAS,cAAc,CAAC,WAEpC,GACF,EAAM,gBAAgB,CAAC,SAAU,MAAO,IACtC,EAAM,cAAc,GAEpB,IAAM,EAAQ,SAAS,cAAc,CAAC,SAAS,KAAK,CAIpD,GAAI,CAAA,KAAE,CAAI,CAAA,MAAE,CAAK,CAAE,CAAG,MAAM,AAAA,CAAA,EAAA,EAAA,QAAO,AAAP,EAAS,IAAI,CAAC,aAAa,CAAC,CACtD,MAAA,CACF,GAEI,EACF,EAAQ,WAAW,CAAG,EAAM,OAAO,EAGnC,SAAS,cAAc,CAAC,UAAU,SAAS,CAAC,GAAG,CAAC,QAChD,EAAQ,WAAW,CACjB,2EAEN,GAGE,GACF,SAAS,cAAc,CAAC,UAAU,gBAAgB,CAChD,SACA,MAAO,IACL,EAAM,cAAc,GAEpB,IAAM,EAAQ,SAAS,cAAc,CAAC,SAAS,KAAK,CAC9C,EAAW,SAAS,cAAc,CAAC,YAAY,KAAK,CAE1D,GAAI,CAEF,GAAM,CAAE,KAAM,CAAS,CAAE,MAAO,CAAU,CAAE,CAAG,MAAM,AAAA,CAAA,EAAA,EAAA,QAAO,AAAP,EAAS,IAAI,CAC/D,aAAa,CAAC,CAAE,MAAA,CAAM,GAGzB,GAAI,EAAY,CACd,QAAQ,GAAG,CAAC,EAAW,OAAO,EAC9B,MACF,CAKA,GAAM,CAAE,KAAM,CAAQ,CAAE,MAAO,CAAS,CAAE,CAAG,MAAM,AAAA,CAAA,EAAA,EAAA,QAAO,AAAP,EAAS,SAAS,CAClE,MAAM,CAAC,WAAY,CAClB,KAAM,CAAE,SAAA,EAAU,MAAA,CAAM,CAC1B,GAEE,GACF,QAAQ,KAAK,CACX,CAAC,wCAAwC,EAAE,EAAU,OAAO,CAAA,CAAE,CAGpE,CAAE,MAAO,EAAK,CACZ,EAAQ,WAAW,CAAG,2BACtB,QAAQ,KAAK,CAAC,EAChB,CACF","sources":["<anon>","src/js/authentication.js"],"sourcesContent":["\n      var $parcel$global = globalThis;\n    \nvar $parcel$modules = {};\nvar $parcel$inits = {};\n\nvar parcelRequire = $parcel$global[\"parcelRequire94c2\"];\n\nif (parcelRequire == null) {\n  parcelRequire = function(id) {\n    if (id in $parcel$modules) {\n      return $parcel$modules[id].exports;\n    }\n    if (id in $parcel$inits) {\n      var init = $parcel$inits[id];\n      delete $parcel$inits[id];\n      var module = {id: id, exports: {}};\n      $parcel$modules[id] = module;\n      init.call(module.exports, module, module.exports);\n      return module.exports;\n    }\n    var err = new Error(\"Cannot find module '\" + id + \"'\");\n    err.code = 'MODULE_NOT_FOUND';\n    throw err;\n  };\n\n  parcelRequire.register = function register(id, init) {\n    $parcel$inits[id] = init;\n  };\n\n  $parcel$global[\"parcelRequire94c2\"] = parcelRequire;\n}\n\nvar parcelRegister = parcelRequire.register;\n\nvar $jy3SA = parcelRequire(\"jy3SA\");\n/*NOTE:\nThis is an extreamly simplified authentication flow. I spent way too long trying to get this to work\nwith first a more traditional password and email flow, which got stuck at reset passowrd.\nThen i tried to use just email login and sign up with usernames but this flopped aswell when trying\nto update the username colomn of the profiles table so that the user can have a username\nConsidering this has taken me over a week to try and get working i opted for the most simple approach\ni can. Just email confirmation login. No usernames, no passowrds just email. I might come back and try\nto improve this later but i really just want to move on past this and work on some actual projects.\n\nI admit this is a cop out but this is also just a protfolio page which needs user acounts for one simple\ntask. So i believe in this case it's justified\n*/ const $c4695332e7f665f1$var$login = document.getElementById(\"login\");\nconst $c4695332e7f665f1$var$signup = document.getElementById(\"signup\");\nconst $c4695332e7f665f1$var$message = document.getElementById(\"message\");\nif ($c4695332e7f665f1$var$login) $c4695332e7f665f1$var$login.addEventListener(\"submit\", async (event)=>{\n    event.preventDefault();\n    const email = document.getElementById(\"email\").value;\n    //TODO: check if user exists using email and profiles tabel\n    var { data: data, error: error } = await (0, $jy3SA.supabase).auth.signInWithOtp({\n        email: email\n    });\n    if (error) $c4695332e7f665f1$var$message.textContent = error.message;\n    else {\n        //window.location.href = \"./index.html\";\n        document.getElementById(\"submit\").classList.add(\"hide\");\n        $c4695332e7f665f1$var$message.textContent = \"Check your email and click the link to login. \\n You can close this tab.\";\n    }\n});\nif ($c4695332e7f665f1$var$signup) document.getElementById(\"signup\").addEventListener(\"submit\", async (event)=>{\n    event.preventDefault();\n    const email = document.getElementById(\"email\").value;\n    const username = document.getElementById(\"username\").value;\n    try {\n        //this will create a user if one does not exist\n        const { data: magicData, error: magicError } = await (0, $jy3SA.supabase).auth.signInWithOtp({\n            email: email\n        });\n        //there was an error with user login/signup\n        if (magicError) {\n            console.log(magicError.message);\n            return;\n        }\n        //the rest of the code needs to run server side because it needs to\n        //have access to the service role so this is where i hand off to the\n        //edge functions\n        const { data: edgeData, error: edgeError } = await (0, $jy3SA.supabase).functions.invoke(\"new-user\", {\n            body: {\n                username: username,\n                email: email\n            }\n        });\n        if (edgeError) console.error(`error invoking new user edge functions: ${edgeError.message}`);\n    } catch (err) {\n        $c4695332e7f665f1$var$message.textContent = \"some big bad scary error\";\n        console.error(err);\n    }\n});\nasync function $c4695332e7f665f1$var$newUser(username, email) {\n//This is the long way of calling an edge function\n/*\n  const url = \"https://jpxdwuzsxkcerplprlwv.supabase.co/functions/v1/new-user\";\n  const headers = {\n    \"Content-Type\": \"application/json\",\n  };\n\n  let response;\n  try {\n    response = await fetch(url, {\n      method: \"POST\",\n      headers,\n      body: JSON.stringify({ username }),\n    });\n    if (!response.ok) {\n      console.log(\n        `HTTP error: ${response.status} - ${response.statusText}. In main call`,\n      );\n    }\n    const data = await response.json();\n    return data;\n  } catch (error) {\n    console.error(\"some wacky error:\", error);\n  }\n  return true;\n  */ }\n\n\n//# sourceMappingURL=login.c5a651ce.js.map\n","import { supabase } from \"./supabaseClient.js\";\n/*NOTE:\nThis is an extreamly simplified authentication flow. I spent way too long trying to get this to work\nwith first a more traditional password and email flow, which got stuck at reset passowrd.\nThen i tried to use just email login and sign up with usernames but this flopped aswell when trying\nto update the username colomn of the profiles table so that the user can have a username\nConsidering this has taken me over a week to try and get working i opted for the most simple approach\ni can. Just email confirmation login. No usernames, no passowrds just email. I might come back and try\nto improve this later but i really just want to move on past this and work on some actual projects.\n\nI admit this is a cop out but this is also just a protfolio page which needs user acounts for one simple\ntask. So i believe in this case it's justified\n*/\n\nconst login = document.getElementById(\"login\");\nconst signup = document.getElementById(\"signup\");\nconst message = document.getElementById(\"message\");\n\nif (login) {\n  login.addEventListener(\"submit\", async (event) => {\n    event.preventDefault();\n\n    const email = document.getElementById(\"email\").value;\n\n    //TODO: check if user exists using email and profiles tabel\n\n    var { data, error } = await supabase.auth.signInWithOtp({\n      email,\n    });\n\n    if (error) {\n      message.textContent = error.message;\n    } else {\n      //window.location.href = \"./index.html\";\n      document.getElementById(\"submit\").classList.add(\"hide\");\n      message.textContent =\n        \"Check your email and click the link to login. \\n You can close this tab.\";\n    }\n  });\n}\n\nif (signup) {\n  document.getElementById(\"signup\").addEventListener(\n    \"submit\",\n    async (event) => {\n      event.preventDefault();\n\n      const email = document.getElementById(\"email\").value;\n      const username = document.getElementById(\"username\").value;\n\n      try {\n        //this will create a user if one does not exist\n        const { data: magicData, error: magicError } = await supabase.auth\n          .signInWithOtp({ email });\n\n        //there was an error with user login/signup\n        if (magicError) {\n          console.log(magicError.message);\n          return;\n        }\n\n        //the rest of the code needs to run server side because it needs to\n        //have access to the service role so this is where i hand off to the\n        //edge functions\n        const { data: edgeData, error: edgeError } = await supabase.functions\n          .invoke(\"new-user\", {\n            body: { username, email },\n          });\n\n        if (edgeError) {\n          console.error(\n            `error invoking new user edge functions: ${edgeError.message}`,\n          );\n        }\n      } catch (err) {\n        message.textContent = \"some big bad scary error\";\n        console.error(err);\n      }\n    },\n  );\n}\n\nasync function newUser(username, email) {\n  //This is the long way of calling an edge function\n  /*\n  const url = \"https://jpxdwuzsxkcerplprlwv.supabase.co/functions/v1/new-user\";\n  const headers = {\n    \"Content-Type\": \"application/json\",\n  };\n\n  let response;\n  try {\n    response = await fetch(url, {\n      method: \"POST\",\n      headers,\n      body: JSON.stringify({ username }),\n    });\n    if (!response.ok) {\n      console.log(\n        `HTTP error: ${response.status} - ${response.statusText}. In main call`,\n      );\n    }\n    const data = await response.json();\n    return data;\n  } catch (error) {\n    console.error(\"some wacky error:\", error);\n  }\n  return true;\n  */\n}\n"],"names":["$parcel$global","globalThis","$parcel$modules","$parcel$inits","parcelRequire","id","exports","init","module","call","err","Error","code","register","$jy3SA","$c4695332e7f665f1$var$login","document","getElementById","$c4695332e7f665f1$var$signup","$c4695332e7f665f1$var$message","addEventListener","event","preventDefault","email","value","data","error","supabase","auth","signInWithOtp","textContent","message","classList","add","username","magicData","magicError","console","log","edgeData","edgeError","functions","invoke","body"],"version":3,"file":"login.c5a651ce.js.map"}